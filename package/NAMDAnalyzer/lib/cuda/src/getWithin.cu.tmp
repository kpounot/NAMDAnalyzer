#include <cuda.h>
#include <cuda_runtime.h>

#define BLOCK_SIZE 32


__global__

void compgetWithin(const float *atomPos, const float *qVecs, int timeOri, int timeIncr, 
                            int qVec, int nbrFrames, float complex correlation)
{
    int blockRow    = blockIdx.y;
    int blockCol    = blockIdx.x;
    int tx          = threadIdx.x;
    int ty          = threadIdx.y;
    int row = blockRow * BLOCK_SIZE + ty;
    int col = blockCol * BLOCK_SIZE + tx;

    float out = 0;

    for(int m=0; m < (A.width + BLOCK_SIZE - 1)/BLOCK_SIZE; ++m)
    {
        __shared__ float As[BLOCK_SIZE][BLOCK_SIZE];
        __shared__ float Bs[BLOCK_SIZE][BLOCK_SIZE];

        if(row < C.height && col < C.width)
        {
            As[ty][tx] = A.elements[row * A.width + m * BLOCK_SIZE + tx];
            Bs[ty][tx] = B.elements[(m*BLOCK_SIZE + ty)*B.width + col];
        }
        else
        {
            As[ty][tx] = 0;
            Bs[ty][tx] = 0;
        }

        __syncthreads();

        for(int i=0; i < BLOCK_SIZE; ++i)
            out += As[ty][i] * Bs[i][tx];

        __syncthreads();
    }

    if(row < C.height && col < C.width)
        C.elements[row * C.width + col] = out;
}





void cu_getWithin_wrapper(float *allAtoms, int nbrAtoms, float *selAtoms, int sel_dim0, float *cellDims,
                                int *out, float distance, cudaDeviceProp devProp)
{

    // Copying atomPos matrix on GPU memory
    float *cu_atomPos;
    size_t size = atomPos_dim0 * atomPos_dim1 * 3 * sizeof(float);
    cudaMallocManaged(&cu_atomPos, size);
    cudaMemcpy(cu_atomPos, atomPos, size, cudaMemcpyHostToDevice);

    // Copying atomPos matrix on GPU memory
    float *cu_atomPos;
    size_t size = atomPos_dim0 * atomPos_dim1 * 3 * sizeof(float);
    cudaMallocManaged(&cu_atomPos, size);
    cudaMemcpy(cu_atomPos, atomPos, size, cudaMemcpyHostToDevice);


    for(int timeOri=0; timeOri < nbrTimeOri; ++timeOri)
    {

        for(int qVec=0; qVec < qVecs_dim1; ++qVec)
        {

            for(int atom=0; atom < atomPos_dim0; ++atom)
            {

                atom_tf_idx = 3 * (atom * atomPos_dim1 + timeOri*timeIncr + nbrFrames); 
                atom_t0_idx = 3 * (atom * atomPos_dim1 + timeOri*timeIncr);

                qVec_idx = 3 * (qIdx * qVecs_dim1 + qVec);

                // Computes distances for given timestep and atom
                dist_0 = atomPos[atom_tf_idx] - atomPos[atom_t0_idx];
                dist_1 = atomPos[atom_tf_idx+1] - atomPos[atom_t0_idx+1];
                dist_2 = atomPos[atom_tf_idx+2] - atomPos[atom_t0_idx+2];

                exponent = cexpf ( I * ( qVecs[qVec_idx] * dist_0 
                                        + qVecs[qVec_idx+1] * dist_1
                                        + qVecs[qVec_idx+2] * dist_2 ) );


                correlation += exponent;

            } // atoms loop

        } // q vectors loop 

    } // time origins loop


    matMulKernel<<<grid, block>>>(d_C, d_A, d_B);

    cudaDeviceSynchronize();

    cudaMemcpy(C.elements, d_C.elements, size, cudaMemcpyDeviceToHost);

    cudaFree(d_A.elements);
    cudaFree(d_B.elements);
    cudaFree(d_C.elements);
}
